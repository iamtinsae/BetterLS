#!/usr/bin/env python3
import os
import click
import tabulate
from utils import sizeof_fmt

MAX_ALLOWED_FILENAME_LENGTH = 20

# Returns list of files and directories present
# in the given path
def list_dir(path: str) -> list[tuple]:
  dirs = sorted(os.listdir(path), key=str.lower)
  ret = []

  for idx, item in enumerate(dirs):
    full_path = os.path.join(path, item)
    try: 
      size = os.stat(full_path).st_size
    except:
      size = 0

    if os.path.isdir(full_path):
      type = "DIR"
    elif os.path.islink(full_path):
      type = "SYMBOLIC"
    elif os.path.ismount(full_path):
      type = "MOUNT"
    elif os.path.isfile(full_path):
      type = "FILE"
    else:
      type = "UNKNOWN"

    ret.append((idx, item,  sizeof_fmt(size), type))

  return ret

# PRETTIFY
def prettify(paths, *, show_hidden_files=False):
  ret = []

  if not show_hidden_files:
    paths = filter(lambda path: not path[1].startswith("."), paths)

  for path in map(list, paths):
    *_, path_type = path

    if len(path[1]) > MAX_ALLOWED_FILENAME_LENGTH:
      path[1] = f"{path[1][:MAX_ALLOWED_FILENAME_LENGTH-3]}..."

    if path_type == 'FILE':
      path = map(lambda a: click.style(a, fg="yellow"), path)
    elif path_type == 'DIR':
      path = map(lambda a: click.style(a, fg="green"), path)
    elif path_type == 'SYMBOLIC':
      path = map(lambda a: click.style(a, fg="magenta"), path)
    elif path_type == 'MOUNT':
      path = map(lambda a: click.style(a, fg="blue"), path)

    ret.append(path)

  return ret

@click.command()
@click.argument("path", default=os.getcwd())
@click.option("-a", "--all", "show_hidden_files", is_flag=True, show_default=True, default=False, help="Include directory entries whose names begin with a dot (.)")
def main(path, show_hidden_files):
  out = list_dir(path)
  headers = ("#", "NAME", "SIZE", "TYPE")
  
  click.echo(tabulate.tabulate(prettify(out, show_hidden_files=show_hidden_files), headers=headers, tablefmt="fancy_outline"))

if __name__ == '__main__':
  main()
